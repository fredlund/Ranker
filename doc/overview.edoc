@title Welcome to the Ranker tool.
@author Lars-Ake Fredlund (lfredlund@fi.upm.es), Clara Benac Earle (cbenac@fi.upm.es)
@doc Ranker is a tool that helps compare, using testing, how well different
implementations of the same specification behave, obtaining 
a "ranking" of the implementations (which are better, which are worse).
The tool uses the Quviq QuickCheck tool for testing.

<h2>Build, Test, and Generate Markdown Docs</h2>

<p>
Ranker requires <a href="http://www.rebar3.org">rebar3</a> for
building and testing.  See <a
href="http://www.rebar3.org/v3.0/docs/getting-started">here</a> for
getting started with rebar3.
</p>
<p>
To compile, execute the following command:<br/>
```
$ rebar3 compile
'''
</p>

<p>
After compilation Erlang beam files will be left in the
directory _build/default/lib/ranker/ebin/.
</p>

<p>
Should you wish to install the Ranker tool in the standard
Erlang library structure, the following commands can be used:<br />

```
$ erl -pa _build/default/lib/ranker/ebin/

> ranker_install:install().
```
</p>

<p>
To generate Markdown docs, execute the following command:<br/>
```
$ env ERL_LIBS=$PWD/_build/default/lib/edown rebar3 edoc
'''
</p>

<h2>Examples</h2>

<p>
The ``examples'' directory contains two examples, a set of Java based
implementations of a simple sorting algorithm in the directory java, and
a set of Erlang based implementations of a list reversal in the 
directory erlang.
</p>

<h3>Java Example</h3>
<p>
A prerequisite for working with the Java example is having
the <a href="https://github.com/fredlund/JavaErlang.git">JavaErlang</a> library installed. 
To build and test the Java example, after having compiled
the Ranker tool, follow the steps below:
```
examples/java$ make
examples/java$ erl -sname tst -pa ../../_build/default/lib/ranker/ebin/ -pa ebin

1> test:test().
...
2> ranker_render:render_classes("corr").
...
3> halt().
'''
As a result of the ranking analysis there will be a set of files corr_classes_X.{bin,dot,interpretation,pdf} which describe the computed ranking (step-by-step).
</p>

<h3>Erlang Example</h3>
<p>
To build and test the Erlang example, after having compiled
the Ranker tool, follow the steps below:
```
examples/erlang make
examples/erlang erl -pa ../../_build/default/lib/ranker/ebin/ -pa ebin

1> test:test().
...
2> ranker_render:render_classes("corr").
...
3> halt().
'''
As a result of the ranking analysis there will be a set of files corr_classes_X.{bin,dot,interpretation,pdf} which describe the computed ranking (step-by-step).
</p>

<h2>Extras</h2>
<p>
The directory extras contains a small interactive application,
based on the <a href="http://www.gnuplot.info/">gnuplot tool</a>,
to interact with complexity graphs computed by the
<a href="https://github.com/nick8325/complexity.git">Complexity tool</a>.
Consult the README file in the extras directory for further information.
</p>

@end



